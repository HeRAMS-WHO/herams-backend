{"version":3,"file":"static/js/700.4f9692c7.chunk.js","mappings":"iOASAA,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,KA0EA,UAvE4B,SAACC,GACzB,IAAAC,GAA8BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GA+D1B,OA7DAI,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAgBC,KAAKT,EAAMU,QAC3BA,EAASC,KAAKC,MAAMJ,GAEpBK,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAQC,GAAQ,IAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEbC,MAAMhB,EAAOiB,QAAS,CACzCC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMnB,KAAKoB,UAAU,CAAErB,OAAQL,EAAQM,SACxC,KAAD,EAJIU,EAAQE,EAAAS,KAKdC,QAAQC,KAAK,WAAYb,GACzBD,EAASD,GAAQ,GAAMI,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAEvBU,QAAQG,MAAKb,EAAAY,IACbf,EAASD,GAAQ,GAAO,yBAAAI,EAAAc,OAAA,GAAAnB,EAAA,kBAE/B,gBAbiBoB,EAAAC,GAAA,OAAAzB,EAAA0B,MAAA,KAAAC,UAAA,KAeZC,EAAY,eAAAC,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,EAAQC,GAAQ,IAAAC,EAAAwB,EAAA,OAAA7B,EAAAA,EAAAA,KAAAM,MAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAAAqB,EAAAtB,KAAA,EAAAsB,EAAArB,KAAA,EAEbC,MAAMhB,EAAOqC,UAAW,CAC3CnB,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMnB,KAAKoB,UAAU,CAAErB,OAAQL,EAAQM,SACxC,KAAD,EAJY,OAARU,EAAQyB,EAAAd,KAAAc,EAAArB,KAAA,EAKUJ,EAAS2B,OAAO,KAAD,EAAjCH,EAASC,EAAAd,KACftB,EAAOiB,QAAUkB,EACNA,EAAUI,MAAM,OAAO,GAElC7B,EAASD,GAAQ,GAAM2B,EAAArB,KAAA,iBAAAqB,EAAAtB,KAAA,GAAAsB,EAAAX,GAAAW,EAAA,SAEvBb,QAAQG,MAAKU,EAAAX,IACbf,EAASD,GAAQ,GAAO,yBAAA2B,EAAAT,OAAA,GAAAO,EAAA,mBAE/B,gBAhBiBM,EAAAC,GAAA,OAAAR,EAAAH,MAAA,KAAAC,UAAA,KAkBZW,EAAgB,IAAIC,EAAAA,cAAc3C,EAAO4C,gBAmB/C,OAfAF,EAAczC,KAAO,CAAC,EAEtByC,EAAcG,eAAiB,SAACpC,EAAQC,GAAQ,OAAKV,EAAOiB,QAAUd,EAAaM,EAAQC,GAAYsB,EAAavB,EAAQC,EAAU,EAElIV,EAAOiB,SACPD,MAAMhB,EAAOiB,SACR6B,MAAK,SAAAnC,GAAQ,OAAIA,EAASoC,MAAM,IAChCD,MAAK,SAAAE,GACFN,EAAczC,KAAO+C,EAAKhD,MAC9B,IAGRJ,EAAW8C,GAGJ,WACH9C,EAAW,KACf,CACJ,GAAG,CAACN,EAAMU,SAELL,GAGDsD,EAAAA,EAAAA,KAACC,EAAAA,uBAAsB,CAACvD,QAASA,IAHhB,IAKzB,C","sources":["components/SurveyJs/SurveyCreatorWidget.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"survey-core/defaultV2.min.css\";\nimport \"survey-creator-core/survey-creator-core.min.css\";\nimport { SurveyCreatorComponent, SurveyCreator } from \"survey-creator-react\";\n\nimport { applySurveyConfigurations } from './custom/survey-modifications';\nimport {applyHSDUStateQuestion} from \"./custom/HSDUStateQuestion\";\nimport {applyFacilityTypeQuestion} from \"./custom/FacilityTypeQuestion\";\n\napplySurveyConfigurations();\napplyHSDUStateQuestion();\napplyFacilityTypeQuestion();\n\n\nconst SurveyCreatorWidget = (props) => {\n    const [creator, setCreator] = useState(null);\n\n    useEffect(() => {\n        const decodedConfig = atob(props.config);\n        const config = JSON.parse(decodedConfig);\n\n        const updateSurvey = async (saveNo, callback) => {\n            try {\n                const response = await fetch(config.dataUrl, {\n                    method: 'PUT',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ config: creator.JSON })\n                });\n                console.warn('response', response);\n                callback(saveNo, true);\n            } catch (e) {\n                console.error(e);\n                callback(saveNo, false);\n            }\n        };\n\n        const createSurvey = async (saveNo, callback) => {\n            try {\n                const response = await fetch(config.createUrl, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ config: creator.JSON })\n                });\n                const surveyUrl = await response.text();\n                config.dataUrl = surveyUrl;\n                const id = surveyUrl.match(/\\d+/)[0];\n                // history.replaceState({}, '', config.updateUrl.replace('10101010', id));\n                callback(saveNo, true);\n            } catch (e) {\n                console.error(e);\n                callback(saveNo, false);\n            }\n        };\n\n        const surveyCreator = new SurveyCreator(config.creatorOptions);\n\n\n        //Refresh survey and reset property grid to let it handle onShowingProperty event\n        surveyCreator.JSON = {};\n\n        surveyCreator.saveSurveyFunc = (saveNo, callback) => config.dataUrl ? updateSurvey(saveNo, callback) : createSurvey(saveNo, callback);\n\n        if (config.dataUrl) {\n            fetch(config.dataUrl)\n                .then(response => response.json())\n                .then(data => {\n                    surveyCreator.JSON = data.config;\n                });\n        }\n\n        setCreator(surveyCreator);\n\n        // Cleanup on unmount\n        return () => {\n            setCreator(null);\n        };\n    }, [props.config]);\n\n    if (!creator) return null;\n\n    return (\n        <SurveyCreatorComponent creator={creator} />\n    );\n};\n\nexport default SurveyCreatorWidget;\n"],"names":["applySurveyConfigurations","applyHSDUStateQuestion","applyFacilityTypeQuestion","props","_useState","useState","_useState2","_slicedToArray","creator","setCreator","useEffect","decodedConfig","atob","config","JSON","parse","updateSurvey","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","saveNo","callback","response","wrap","_context","prev","next","fetch","dataUrl","method","headers","body","stringify","sent","console","warn","t0","error","stop","_x","_x2","apply","arguments","createSurvey","_ref2","_callee2","surveyUrl","_context2","createUrl","text","match","_x3","_x4","surveyCreator","SurveyCreator","creatorOptions","saveSurveyFunc","then","json","data","_jsx","SurveyCreatorComponent"],"sourceRoot":""}