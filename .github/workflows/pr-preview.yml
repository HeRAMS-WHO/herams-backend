name: preview_environment
on: [ pull_request ]
jobs:
  precondition:
    name: "Check for migrations"
    runs-on: ubuntu-latest
    outputs:
      hasmigrations: ${{ steps.migrations.outputs.changed }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: marceloprado/has-changed-path@v1
        id: migrations
        with:
          paths: protected/migrations/**
  deploy:
    needs:
      - build
      - precondition
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v2
      - name: Authenticate to kubernetes
        uses: azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_URL }}
          k8s-secret: ${{ secrets.STAGING_K8S_SECRET }}
      - name: Extract PR branch name
        run: echo "RELEASE_VERSION=${GITHUB_HEAD_REF#refs/*/}" >> $GITHUB_ENV
      - name: Extract PR number
        run: echo PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH") >> $GITHUB_ENV
      - name: Create yaml from template
        env:
          DEPLOYMENT_NAME: ${{ env.RELEASE_VERSION }}
          NEEDS_DATABASE: ${{ needs.precondition.outputs.hasmigrations }}
          COMMIT_SHA: ${{ github.sha }}
        run: k8s/parse-templates.sh k8s/staging/*.yaml.php
      - name: Dump template
        run: cat k8s/staging/preview-deployment.yaml
      - uses: Azure/k8s-deploy@v1.4
        with:
          namespace: 'staging'
          manifests: |
            k8s/staging/sealed-database-preview.yaml
            k8s/staging/preview-deployment.yaml

          images: |
            ghcr.io/herams-who/herams-backend/app:${{ github.sha }}
          kubectl-version: 'latest'
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: "${{ env.PR_NUMBER }}"
          body: |
            Preview environment created at: https://${{ env.RELEASE_VERSION }}.herams-staging.org
          reactions: '+1'
  build:
    name: Build containers
    needs: [precondition]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Fetch highest stable version of Composer 2.2.*
        run: |
          LATEST_2_2_VERSION=$(curl -s https://packagist.org/packages/composer/composer.json | python -c "
  import sys, json
  versions = [v for v in json.load(sys.stdin)['package']['versions'].keys() if v.startswith('2.2.') and '-dev' not in v and '-alpha' not in v and '-beta' not in v and '-RC' not in v]
  versions.sort(key=lambda s: list(map(int, s.split('.'))))
  print(versions[-1])
  ")
          echo "LATEST_2_2_VERSION=$LATEST_2_2_VERSION" >> $GITHUB_ENV
  
      # Use $LATEST_2_2_VERSION in subsequent steps as needed
      - name: Update Composer to the fetched version
        run: composer self-update $LATEST_2_2_VERSION
      - run: composer install --ignore-platform-reqs
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Build and push Docker images
        uses: docker/build-push-action@v2.9.0
        with:
          push: true
          context: .
          file: docker/app/Dockerfile
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            INCLUDE_DATABASE_SEED=${{ needs.precondition.outputs.hasmigrations }}
          tags: |
            ghcr.io/herams-who/herams-backend/app:${{ github.sha }}
