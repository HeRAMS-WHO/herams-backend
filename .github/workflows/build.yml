name: Deploy to staging
on:
  push:
    branches: [ v1 ]
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@2.9.0
        with:
          php-version: '8.0' # Modify this according to your required PHP version.
          extensions: mbstring, dom, ctype, iconv, zip, curl
          coverage: xdebug
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Setup GitHub Token for Composer
        run: composer config -g github-oauth.github.com ${{ secrets.COMPOSER_GITHUB_TOKEN }}
      - name: Fetch highest stable version of Composer 2.2.*
        run: |
          LATEST_2_2_VERSION=$(curl -s https://packagist.org/packages/composer/composer.json | python -c "
          import sys, json
          versions = [v for v in json.load(sys.stdin)['package']['versions'].keys() if v.startswith('2.2.') and '-dev' not in v and '-alpha' not in v and '-beta' not in v and '-RC' not in v]
          versions.sort(key=lambda s: list(map(int, s.split('.'))))
          print(versions[-1])
          ")
          echo "LATEST_2_2_VERSION=$LATEST_2_2_VERSION" >> $GITHUB_ENV
  
      # Use $LATEST_2_2_VERSION in subsequent steps as needed
      - name: Update Composer to the fetched version
        run: composer self-update $LATEST_2_2_VERSION
      - name: Display Composer Version
        run: composer --version
      - name: install composer
        run: composer install --ignore-platform-reqs
      - run: composer global require "squizlabs/php_codesniffer=3.*"
      # - run: composer update herams/i18n --ignore-platform-reqs --no-cache --no-scripts --with-all-dependencies
      - run: docker-compose build
      - run: docker network create devproxy2
      - run: cp .env.default .env
      - run: docker-compose run --rm codeception run --coverage-xml
      - run: composer stan
      - uses: codecov/codecov-action@v1
        with:
          files: ./tests/_output/coverage.xml
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: false # optional (default = false)

  deploy:
    needs: [ test, build ]
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v2
      - name: Set manifests
        run: |
          echo 'MANIFESTS<<EOF' >> $GITHUB_ENV
          find k8s/shared k8s/staging -type f >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - run: echo "$MANIFESTS"
      - name: Authenticate to kubernetes
        uses: azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_URL }}
          k8s-secret: ${{ secrets.STAGING_K8S_SECRET }}
      - uses: Azure/k8s-deploy@v1.4
        with:
          namespace: 'staging'
          manifests: |
            k8s/staging/sealed-app.yaml
            k8s/staging/sealed-database-staging.yaml
            k8s/staging/sealed-database-preview.yaml
            k8s/staging/sealed-limesurvey-staging.yaml
            k8s/staging/sealed-redis-acl.yaml
            k8s/staging/sealed-smtp-staging.yaml
            k8s/staging/sealed-mailchimp-staging.yaml
            k8s/staging/ingress.yaml
            k8s/shared/deployment.yaml
            k8s/shared/nginx-config-map.yaml
            k8s/shared/app-config-map.yaml
          images: |
            ghcr.io/herams-who/herams-backend/app:${{ github.sha }}
          kubectl-version: 'latest'
  build:
    name: Build container
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@2.9.0
        with:
          php-version: '8.0' # Modify this according to your required PHP version.
          extensions: mbstring, dom, ctype, iconv, zip, curl
          coverage: xdebug
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Fetch highest stable version of Composer 2.2.*
        run: |
          LATEST_2_2_VERSION=$(curl -s https://packagist.org/packages/composer/composer.json | python -c "
          import sys, json
          versions = [v for v in json.load(sys.stdin)['package']['versions'].keys() if v.startswith('2.2.') and '-dev' not in v and '-alpha' not in v and '-beta' not in v and '-RC' not in v]
          versions.sort(key=lambda s: list(map(int, s.split('.'))))
          print(versions[-1])
          ")
          echo "LATEST_2_2_VERSION=$LATEST_2_2_VERSION" >> $GITHUB_ENV
  
      # Use $LATEST_2_2_VERSION in subsequent steps as needed
      - name: Update Composer to the fetched version
        run: composer self-update $LATEST_2_2_VERSION
      - name: Display Composer Version
        run: composer --version
      - name: install composer
        run: composer install --ignore-platform-reqs
      - name: update local i18n files
        run: composer update herams/i18n --ignore-platform-reqs --no-cache --no-scripts --with-all-dependencies
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Build and push Docker images
        uses: docker/build-push-action@v3.0.0
        with:
          push: true
          context: .
          file: docker/app/Dockerfile
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          tags: |
            ghcr.io/herams-who/herams-backend/app:${{ github.sha }}
            ghcr.io/herams-who/herams-backend/app:latest
