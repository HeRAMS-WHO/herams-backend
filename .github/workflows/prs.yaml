name: Run tests
on:
  pull_request:
    branches: [ v1 ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@2.9.0
        with:
          php-version: '8.0' # Modify this according to your required PHP version.
          extensions: mbstring, dom, ctype, iconv, zip, curl
          coverage: xdebug
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Get Docker Images Directory
        id: docker-images
        run: |
          echo "::set-output name=dir::$(docker info --format '{{ .DockerRootDir}}')"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-docker
          restore-keys: |
            ${{ runner.os }}-docker
      - run: cp .env.default .env
      - name: Fetch highest stable version of Composer 2.2.*
        run: |
          LATEST_2_2_VERSION=$(curl -s https://packagist.org/packages/composer/composer.json | python -c "
          import sys, json
          versions = [v for v in json.load(sys.stdin)['package']['versions'].keys() if v.startswith('2.2.') and '-dev' not in v and '-alpha' not in v and '-beta' not in v and '-RC' not in v]
          versions.sort(key=lambda s: list(map(int, s.split('.'))))
          print(versions[-1])
          ")
          echo "LATEST_2_2_VERSION=$LATEST_2_2_VERSION" >> $GITHUB_ENV
  
      # Use $LATEST_2_2_VERSION in subsequent steps as needed
      - name: Update Composer to the fetched version
        run: composer self-update $LATEST_2_2_VERSION
      - name: Display Composer Version
        run: composer --version
      - run: composer install --ignore-platform-reqs
      - run: docker-compose build
      - run: docker network create devproxy2
      - run: docker-compose run --rm codeception run --coverage-xml
      - run: composer stan
